#!/usr/bin/env ruby
# author: Cyril Rohr <cyril.rohr@irisa.fr>
# Really simple qualification script, that will try to submit a job on all sites.
# Once the jobs are running, it will try to submit a deployment on all of them.
# Run with ./qualify

already_tried = false
begin
  require 'restfully'
  require 'timeout'
  require 'logger'
  require 'fileutils'
  require 'json'
rescue LoadError => e
  require 'rubygems'
  retry unless already_tried
end

AUTHORIZED_KEY = File.read File.expand_path($*[0] || "~/.ssh/id_dsa.pub")
OAR_WALLTIME_SYNTAX = "00:30:00"
WALLTIME = 60*15 # 15 mins
LOGS_DIR = File.join(File.dirname(__FILE__), "log")
TIMEOUT_JOBS_POLL = 600
TIMEOUT_DEPLOYMENTS_POLL = 3600

FileUtils.mkdir_p(LOGS_DIR) unless File.exist?(LOGS_DIR)
logger = Logger.new(File.join(LOGS_DIR, 'qualification.log'), 50, 1024000)
logger.level = Logger::INFO

errors = []
jobs = []
deployments = []
start_time = Time.now
end_time = nil

%w{INT TERM}.each do |signal|
  Signal.trap( signal ) do
    logger.warn "[#{Process.pid}] Received #{signal}, stopping #{__FILE__}"
    logger.info "Killing all jobs and deployments..."
    jobs.each{|j| j.delete}
    deployments.each{|d| d.delete}
    exit(2)
  end
end


Restfully::Session.new(:configuration_file => "~/.restfully/api.grid5000.fr.yml", :verbose => true, :logger => logger) do |root, session|
  
  output_file = File.open(File.join(LOGS_DIR, "output.log"), "w") do |output|
    output.sync = true
    
    banner_for_step0 = "========= BEGIN [#{start_time}]"
    session.logger.info banner_for_step0
    output.puts banner_for_step0
  
    root.sites.each do |site|
      status = site.status.inject({:hardware_state => Hash.new(0), :system_state => Hash.new(0)}){ |accu, status| 
        accu[:hardware_state][status["hardware_state"]] += 1
        accu[:system_state][status["system_state"]] += 1
        accu
      }
      message = "Status of #{site['uid']}: #{status.inspect}"
      session.logger.info message
      output.puts message
      session.logger.info "Submitting a job on the #{site['uid']} site..."
      job = {
        :resources => "nodes=#{[status[:system_state]["free"] || 0, rand(3)+1].min},walltime=#{OAR_WALLTIME_SYNTAX}", # really need to address this
        :command => "sleep #{WALLTIME}", # really need to address this
        :types => ["deploy"]
      }
      session.logger.info job
      begin
        Timeout.timeout(10) do
          job = site.jobs.submit(job)
          jobs << job.reload
        end  
      rescue Exception, Timeout::Error => e
        output.puts [site['uid'], e.class, e.message].inspect
        session.logger.error [site['uid'], e.class, e.message, e.backtrace]
      end
    end
  
    banner_for_step1 = "Managed to successfully submit #{jobs.length} jobs out of #{root.sites['total']} possible."
    session.logger.info banner_for_step1
    output.puts banner_for_step1
    
  
    begin
      Timeout.timeout(TIMEOUT_JOBS_POLL) do
        while !jobs.all?{|j| j.reload['state'] == "running"}
          sleep 30
        end
      end
    rescue Timeout::Error => e
      message = "One of the jobs has not succeeded in the given time: "+
                            "#{jobs.map{|j| "#{j.parent['uid']}: #{j['state']}"}.join(", ")}"
      session.logger.error message
      output.puts message
      jobs.each{|job| job.delete if job['state'] == "waiting" }
    end

    jobs.reject!{|j| j['state'] == 'waiting'}
  
    jobs.each do |job|
      site = job.parent
      session.logger.info job.inspect
      deployment = {
        :nodes => job['assigned_nodes'],
        :environment => "lenny-x64-base",
        :key => AUTHORIZED_KEY
      }
      begin
        Timeout.timeout(10) do
          session.logger.info "Submitting a deployment on the #{site['uid']} site..."
          deployments << job.parent.deployments.submit(deployment)
        end
      rescue Exception, Timeout::Error => e
        output.puts [site['uid'], e.class, e.message].inspect
        session.logger.error [site['uid'], e.class, e.message, e.backtrace]
      end
    end

    banner_for_step2 = "Managed to successfully submit #{deployments.length} deployments out of #{jobs.length} jobs running."
    session.logger.info banner_for_step2
    output.puts banner_for_step2

    begin
      Timeout.timeout(TIMEOUT_DEPLOYMENTS_POLL) do
        while deployments.any?{ |d| d.reload['status'] == "processing" }
          sleep 30
        end
      end
    rescue Timeout::Error => e
      message = "One of the deployment has not succeeded in the given time: "+
                "#{deployments.map{|d| "#{d.parent['uid']}: #{d['status']}"}.join(", ")}"
      session.logger.error message
      output.puts message
      deployments.each{|deployment| deployment.delete if deployment['status'] == "processing" }
    end

    deployments.reject!{|d| d['status'] != "terminated"}
  
    end_time = Time.now
    banner_for_step3 = "========= END [#{end_time} - #{end_time-start_time}s]"
    session.logger.info banner_for_step3
    output.puts banner_for_step3

  end
  
  if jobs.length == root.sites.length && deployments.length == root.sites.length
    exit(0)
  else
    message = %{
      Qualification started at #{start_time}, ended at #{end_time} (duration=#{(end_time-start_time).to_i}s)
      There were #{jobs.length}/#{root.sites.length} jobs successfully submitted and running, and #{deployments.length}/#{jobs.length} deployments successfully completed.
    
      * Jobs
      #{jobs.inspect}
    
      * Deployments
      #{deployments.inspect}
      
      * Abridged log:
      #{output_file.read}
      
      Please inspect the complete log to find out the causes of the errors.
    }
    session.post("/sid/notifications", {:to => ["mailto:cyril.rohr@irisa.fr?subject=Qualification Error"], :body => message}.to_json, :headers => {:content_type => "application/json", :accept => "application/json"})
    exit(1)
  end
end

